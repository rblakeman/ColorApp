{"version":3,"sources":["components/input-field.js","components/color-square.js","components/unsplash-picture.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","display","flexDirection","alignItems","justifyContent","flexWrap","info","minWidth","padding","hrefs","textDecoration","color","whiteSpace","textField","margin","submitButton","InputField","state","val","inputChange","event","setState","target","value","submitChange","e","props","onInputSubmit","style","width","height","minHeight","href","TextField","required","id","label","variant","onChange","this","Button","onClick","Component","ColorSquare","str","reverse","substr","charAt","Card","backgroundColor","textAlign","name","UnsplashPicture","src","url","alt","colorRow","defaultColors","App","colors","names","urls","colorAPI","bind","pictureAPI","console","log","fetch","then","response","ok","json","data","map","hex","i","idx","process","results","small","newURLs","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c13ac4b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport ColorIcon from '@material-ui/icons/ColorLensOutlined';\n\nconst styles = {\n    container: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexWrap: 'wrap'\n    },\n    info: {\n        display: 'inline',\n        flexDirection: 'column',\n        minWidth: '242px',\n        padding: 20\n    },\n    hrefs: {\n        textDecoration: 'none',\n        color: 'blue',\n        whiteSpace: 'nowrap'\n    },\n    textField: {\n        margin: 10\n    },\n    submitButton: {\n        margin: 10\n    }\n};\n\nexport default class InputField extends Component {\n    state = {\n        val: '12ab5f'\n    };\n\n    inputChange = (event) => {\n        this.setState({ val: event.target.value });\n    }\n\n    submitChange = (e) => {\n        this.props.onInputSubmit(this.state.val);\n    }\n\n    render() {\n        return (\n            <div style={styles.container}>\n                <ColorIcon\n                    style={{\n                        width: '10%',\n                        height: '10%',\n                        minWidth: '75px',\n                        minHeight: '75px'\n                    }} />\n                <div style={styles.info}>\n                    {'Colors from: '}\n                    <a style={styles.hrefs} href=\"http://www.thecolorapi.com/\">\n                        The Color API\n                    </a>\n                    <br />\n                    {'Pictures from: '}\n                    <a style={styles.hrefs} href=\"https://unsplash.com/\">\n                        Unsplash API\n                    </a>\n                    <br />\n                    (Max requests of ~50 pictures/hr)\n                </div>\n                <TextField\n                    required={true}\n                    id=\"outlined-required\"\n                    label=\"Hex Value\"\n                    style={styles.textField}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={this.inputChange}\n                    value={this.state.val} />\n                <Button\n                    variant=\"contained\"\n                    onClick={this.submitChange}\n                    style={styles.submitButton}>\n                Submit\n                </Button>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\n\nexport default class ColorSquare extends Component {\n    reverse(str) {\n        if (str === '') {\n            return '';\n        }\n\n        return this.reverse(str.substr(1)) + str.charAt(0);\n    }\n\n    render() {\n        // let hex = this.props.color.substr(1)\n        // // hex = this.reverse(hex)\n        // hex = hex[4] + hex[5] + hex[2] + hex[3] + hex[0] + hex[1]\n        // hex = '#' + hex\n\n        return (\n            <Card\n                style={{\n                    width: 250,\n                    height: 100,\n                    color: 'white',\n                    backgroundColor: this.props.color,\n                    textAlign: 'center'\n                }}>\n                {this.props.name}\n            </Card>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\n\nexport default class UnsplashPicture extends Component {\n    render() {\n        return (\n            <Card\n                style={{\n                    width: 250,\n                    height: 250\n                }}>\n                <img\n                    src={this.props.url}\n                    alt='Issue communicating with Unsplash API, likely hit the rate limit of 50 pictures per hour' />\n            </Card>\n        );\n    }\n}\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport InputField from './components/input-field';\nimport ColorSquare from './components/color-square';\nimport UnsplashPicture from './components/unsplash-picture';\n\nconst styles = {\n    colorRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n};\n\nconst API_ACCESS_KEY = process.env.REACT_APP_apiAccessKey;\n\n// Return some shades if color api fetch fails\nconst defaultColors = {\n    'colors': [\n        {\n            'hex': { 'value': '#000000' },\n            'name': { 'value': 'Black' }\n        },\n        {\n            'hex': { 'value': '#CC0000' },\n            'name': { 'value': 'Red' }\n        },\n        {\n            'hex': { 'value': '#00CC00' },\n            'name': { 'value': 'Green' }\n        },\n        {\n            'hex': { 'value': '#0000CC' },\n            'name': { 'value': 'Blue' }\n        },\n        {\n            'hex': { 'value': '#FFFFFF' },\n            'name': { 'value': 'White' }\n        }\n    ]\n};\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.colorAPI = this.colorAPI.bind(this);\n        this.pictureAPI = this.pictureAPI.bind(this);\n        this.colorAPI('12ab5f');\n\n        console.log('last updated: March 16, 2021');\n    }\n\n    state = {\n        colors: [],\n        names: [],\n        urls: ['', '', '', '', '']\n    };\n\n    colorAPI(color) {\n        this.setState({ urls: [] });\n        fetch(\n            `https://www.thecolorapi.com/scheme?hex=${color}&mode=quad&format=json`\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    console.log('Issue communicating with Color API');\n\n                    return { ...defaultColors };\n                }\n\n                return response.json();\n            })\n            .then((data) => {\n                const colors = data.colors.map((e) => {\n                    return e.hex.value;\n                });\n                const names = data.colors.map((e, i) => {\n                    this.pictureAPI(e.name.value, i);\n\n                    return e.name.value;\n                });\n\n                this.setState({ colors, names });\n            });\n    }\n\n    pictureAPI(name, idx) {\n        fetch(\n            `https://api.unsplash.com/search/photos?page=1&query=${name}&client_id=${API_ACCESS_KEY}`\n        )\n            .then((response) => {\n                if (!response.ok) {\n                    console.log('Issue communicating with Unsplash API, rate limited to 50 pictures per hour');\n\n                    return { results: [] };\n                }\n\n                return response.json();\n            })\n            .then((data) => {\n                if (data.results[0]) {\n                    const url = data.results[0].urls.small;\n                    let newURLs = this.state.urls;\n                    newURLs[idx] = url;\n                    this.setState({ urls: newURLs });\n                }\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <InputField onInputSubmit={this.colorAPI} />\n                <div style={styles.colorRow}>\n                    {this.state.colors.map((e, i) => {\n                        return <ColorSquare key={i} color={e} name={this.state.names[i]} />;\n                    })}\n                </div>\n                <div style={styles.colorRow}>\n                    {this.state.urls.map((e, i) => {\n                        return <UnsplashPicture key={i} url={e} />;\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}