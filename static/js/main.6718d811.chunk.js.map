{"version":3,"sources":["components/input-field.js","components/color-square.js","components/unsplash-picture.js","App.js","serviceWorker.js","index.js"],"names":["styles","container","display","flexDirection","alignItems","justifyContent","flexWrap","info","Object","defineProperty","padding","minWidth","hrefs","textDecoration","color","whiteSpace","textField","margin","submitButton","InputField","state","val","inputChange","event","_this","setState","target","value","submitChange","e","props","onInputSubmit","react_default","a","createElement","style","ColorLensOutlined_default","width","height","minHeight","href","TextField_default","required","id","label","variant","onChange","this","Button_default","onClick","Component","ColorSquare","str","reverse","substr","charAt","hex","Card_default","backgroundColor","textAlign","name","UnsplashPicture","src","url","colorRow","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colors","names","urls","colorAPI","bind","assertThisInitialized","_this2","fetch","concat","then","response","json","data","map","i","pictureAPI","idx","_this3","process","results","small","newURLs","_this4","className","input_field_InputField","color_square_ColorSquare","key","unsplash_picture_UnsplashPicture","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6718d811.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Color_Icon from '@material-ui/icons/ColorLensOutlined'\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  },\n  info: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: 20,\n    minWidth: '242px',\n    display: 'inline'\n  },\n  hrefs: {\n    textDecoration: 'none',\n    color: 'blue',\n    whiteSpace: 'nowrap'\n  },\n  textField: {\n    margin: 10\n  },\n  submitButton: {\n    margin: 10\n  }\n}\n\nexport default class InputField extends Component {\n  state = {\n    val: '12ab5f'\n  }\n\n  inputChange = (event) => {\n    this.setState({ val: event.target.value })\n  }\n\n  submitChange = (e) => {\n    this.props.onInputSubmit(this.state.val)\n  }\n\n  render() {\n    return (\n      <div style={styles.container}>\n        <Color_Icon\n          style={{\n            width: '10%',\n            height: '10%',\n            minWidth: '75px',\n            minHeight: '75px'\n          }}\n        />\n        <div style={styles.info}>\n          Colors from:{' '}\n          <a style={styles.hrefs} href=\"http://www.thecolorapi.com/\">\n            The Color API\n          </a>{' '}\n          <br />\n          Pictures from:{' '}\n          <a style={styles.hrefs} href=\"https://unsplash.com/\">\n            Unsplash\n          </a>{' '}\n          <br />\n          Max requests of ~50 pictures/hr\n        </div>\n        <TextField\n          required={true}\n          id=\"outlined-required\"\n          label=\"Hex Value\"\n          style={styles.textField}\n          margin=\"normal\"\n          variant=\"outlined\"\n          onChange={this.inputChange}\n          value={this.state.val}\n        />\n        <Button\n          variant=\"contained\"\n          onClick={this.submitChange}\n          style={styles.submitButton}\n        >\n          Submit\n        </Button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Card from '@material-ui/core/Card'\n\nexport default class ColorSquare extends Component {\n  reverse(str) {\n    if (str === '') {\n      return ''\n    } else {\n      return this.reverse(str.substr(1)) + str.charAt(0)\n    }\n  }\n\n  render() {\n    let hex = this.props.color.substr(1)\n    // hex = this.reverse(hex)\n    hex = hex[4] + hex[5] + hex[2] + hex[3] + hex[0] + hex[1]\n    hex = '#' + hex\n\n    return (\n      <Card\n        style={{\n          width: 250,\n          height: 100,\n          color: 'white',\n          backgroundColor: this.props.color,\n          textAlign: 'center'\n        }}\n      >\n        {this.props.name}\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport Card from '@material-ui/core/Card'\n\nexport default class UnsplashPicture extends Component {\n  render() {\n    return (\n      <Card\n        style={{\n          width: 250,\n          height: 250\n        }}\n      >\n        <img src={this.props.url} />\n      </Card>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport InputField from './components/input-field'\nimport ColorSquare from './components/color-square'\nimport UnsplashPicture from './components/unsplash-picture'\nconst styles = {\n  colorRow: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center'\n  }\n}\n\nconst API_ACCESS_KEY = process.env.REACT_APP_apiAccessKey\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.colorAPI = this.colorAPI.bind(this)\n    // this.pictureAPI = this.pictureAPI.bind(this)\n    this.colorAPI('12ab5f')\n  }\n\n  state = {\n    colors: [],\n    names: [],\n    urls: ['', '', '', '', '']\n  }\n\n  colorAPI(color) {\n    this.setState({ urls: [] })\n    fetch(\n      `http://www.thecolorapi.com/scheme?hex=${color}&mode=quad&format=json`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        const colors = data.colors.map((e) => {\n          return e.hex.value\n        })\n        const names = data.colors.map((e, i) => {\n          this.pictureAPI(e.name.value, i)\n          return e.name.value\n        })\n\n        this.setState({ colors, names })\n      })\n  }\n\n  pictureAPI(name, idx) {\n    fetch(\n      `https://api.unsplash.com/search/photos?page=1&query=${name}&client_id=${API_ACCESS_KEY}`\n    )\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        if (data.results[0]) {\n          const url = data.results[0].urls.small\n          let newURLs = this.state.urls\n          newURLs[idx] = url\n          this.setState({ urls: newURLs })\n        }\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <InputField onInputSubmit={this.colorAPI} />\n        <div style={styles.colorRow}>\n          {this.state.colors.map((e, i) => {\n            return <ColorSquare key={i} color={e} name={this.state.names[i]} />\n          })}\n        </div>\n        <div style={styles.colorRow}>\n          {this.state.urls.map((e, i) => {\n            return <UnsplashPicture key={i} url={e} />\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}